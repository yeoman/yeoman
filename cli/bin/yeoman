#!/usr/bin/env node
var fs = require('fs'),
  join = require('path').join,
  _ = require('underscore'),
  colors = require('colors'),
  insight = require('../lib/plugins/insight.js'),
  yeoman = require('../'),
  async = require('async'),
  pkg = require('../package.json'),
  compiled = _.template( fs.readFileSync( join(__dirname, 'help.txt'), 'utf8' ));

// Returns the user's home directory in a platform agnostic way.
function getUserHome() {
  return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
}

// grunt with the plugin registered
var grunt = require('grunt').npmTasks(join(__dirname, '../'));

// Get back a reference to the internal grunt cli object so that we can read
// command line parsed options from grunt, to run our internal additional
// logic.

var cli =  require('grunt/lib/grunt/cli');

// command line options and remaining args
var opts = cli.options,
  cmds = cli.tasks,
  route = cmds.join(' ').trim('');

// custom help, on `h5bp help`
if(/^help/.test(route)) {
  if(/^help$/.test(route)) {
    return console.log( compiled() );
  }
  cli.tasks = cmds.join(':');
}

// add the plugin version on `--version`
if(opts.version) {
  return console.log('%s  v%s', pkg.name, pkg.version);
}

// Matches everything after init to prevent
// the user from seeing the default grunt init tasks
if(/^init/.test(route)) {
  // required handling of options / arguments to workaround some internal check
  // of Grunt, and let the generators go through (init and invoked in our front
  // Grunt template)
  yeoman.generators.prepare(grunt);
}

// a bower command?
if(/^install|^uninstall|^search|^list|^ls|^lookup|^update/.test(route)) {
  cli.tasks = 'bower' + ':' + cmds.join(':');
}

/* Yeoman Insight =========================================================== */
async.series([function(cb) {

  // Are we dealing with yeoman in a test environment? If so, skip the
  // insight prompt. This is specifically put into the environment by
  // our test spawn helper.
  if(process.env.yeoman_test) return cb();

  insight.init({
    pkgname    : pkg.name,
    getUserHome: getUserHome,
    cmds       : cmds,
    cb         : cb
  });


}, function(cb) {

  // if the route is empty
  if(/^$/.test(route)) {
    // this is specific to an empty route code
    console.log(pkg.name + ' v%s', pkg.version);

    // we return early to prevent grunt from actually running
    // and instead just output help.txt
    cb();
    return console.log( compiled() );
  }

  // the grunt cli
  grunt.cli();

  cb();

}]);


