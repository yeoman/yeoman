#!/usr/bin/env node
var fs = require('fs'),
  join = require('path').join,
  help = join(__dirname, 'help.txt'),
  insight = require('../lib/plugins/insight.js'),
  async = require('async'),
  pkg = require('../package.json');

// Returns the user's home directory in a platform agnostic way.
function getUserHome() {
  return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
}

// grunt with the plugin registered
var grunt = require('grunt').npmTasks(join(__dirname, '../'));

// Get back a reference to the internal grunt cli object (Yes, it's hacky) We
// need this to be able to read grunt command line parsed options and tasks to
// run to hook our internal additional logic.
//
// Another (nicer) alternative is to redo the command line parsing with nopt,
// but it'll add yet another dependency for a very little thing
var cli =  require('grunt/lib/grunt/cli');

// command line options and remaining args
var opts = cli.options,
  cmds = cli.tasks,
  route = cmds.join(' ').trim('');

// custom help, on `h5bp help`
if(/^help/.test(route)) {
  if(/^help$/.test(route)) return fs.createReadStream(help).pipe(process.stdout);
  cli.tasks = cmds.join(':');
}

// add the plugin version on `--version`
if(opts.version) {
  console.log('h5bp  v%s', pkg.version);
}

// `yeoman init` -> `grunt init:yeoman`
if(/^init$/.test(route)) {
  cli.tasks = 'init:yeoman';
}

// a nest command?
if(/^install|uninstall|search|list|lookup|update/.test(route)) {
  cli.tasks = 'nest' + ':' + cmds.join(':');
}

/* Yeoman Insight =========================================================== */
async.series([function(cb){


  insight.init({
    pkgname    : pkg.name,
    getUserHome: getUserHome,
    cmds       : cmds,
    cb         : cb
  });


},function(cb){

  // if the route is empty
  if(/^$/.test(route)) {
    // this is specific to an empty route code
    console.log(pkg.name + ' v%s', pkg.version);

    // we return early to prevent grunt from actually running
    // and instead just output help.txt
    cb();
    return fs.createReadStream(help).pipe(process.stdout);
  }

  // the grunt cli
  grunt.cli();

  cb();

}]);


